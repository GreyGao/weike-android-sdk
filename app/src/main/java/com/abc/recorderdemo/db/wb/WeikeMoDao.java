package com.abc.recorderdemo.db.wb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.abcpen.livemeeting.sdk.wbrecord.mo.WeikeMo;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEIKE_MO".
*/
public class WeikeMoDao extends AbstractDao<WeikeMo, Long> {

    public static final String TABLENAME = "WEIKE_MO";

    /**
     * Properties of entity WeikeMo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TotalPage = new Property(0, int.class, "totalPage", false, "TOTAL_PAGE");
        public final static Property Id = new Property(1, long.class, "id", true, "_id");
        public final static Property PushStatus = new Property(2, int.class, "pushStatus", false, "PUSH_STATUS");
        public final static Property AppType = new Property(3, int.class, "appType", false, "APP_TYPE");
        public final static Property ImgID = new Property(4, int.class, "imgID", false, "IMG_ID");
        public final static Property VideoID = new Property(5, int.class, "videoID", false, "VIDEO_ID");
        public final static Property Local_time = new Property(6, long.class, "local_time", false, "LOCAL_TIME");
        public final static Property Duration = new Property(7, long.class, "duration", false, "DURATION");
        public final static Property Background_img_url = new Property(8, String.class, "background_img_url", false, "BACKGROUND_IMG_URL");
        public final static Property Name = new Property(9, String.class, "name", false, "NAME");
        public final static Property Local_path = new Property(10, String.class, "local_path", false, "LOCAL_PATH");
        public final static Property Local_wb_path = new Property(11, String.class, "local_wb_path", false, "LOCAL_WB_PATH");
        public final static Property Local_wb_png_path = new Property(12, String.class, "local_wb_png_path", false, "LOCAL_WB_PNG_PATH");
        public final static Property Temp_img_url = new Property(13, String.class, "temp_img_url", false, "TEMP_IMG_URL");
        public final static Property Temp_video_url = new Property(14, String.class, "temp_video_url", false, "TEMP_VIDEO_URL");
        public final static Property Paper_type = new Property(15, int.class, "paper_type", false, "PAPER_TYPE");
        public final static Property UserCacheID = new Property(16, long.class, "userCacheID", false, "USER_CACHE_ID");
        public final static Property Pdf_url = new Property(17, String.class, "pdf_url", false, "PDF_URL");
        public final static Property Pdf_path = new Property(18, String.class, "pdf_path", false, "PDF_PATH");
    }


    public WeikeMoDao(DaoConfig config) {
        super(config);
    }
    
    public WeikeMoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEIKE_MO\" (" + //
                "\"TOTAL_PAGE\" INTEGER NOT NULL ," + // 0: totalPage
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 1: id
                "\"PUSH_STATUS\" INTEGER NOT NULL ," + // 2: pushStatus
                "\"APP_TYPE\" INTEGER NOT NULL ," + // 3: appType
                "\"IMG_ID\" INTEGER NOT NULL ," + // 4: imgID
                "\"VIDEO_ID\" INTEGER NOT NULL ," + // 5: videoID
                "\"LOCAL_TIME\" INTEGER NOT NULL ," + // 6: local_time
                "\"DURATION\" INTEGER NOT NULL ," + // 7: duration
                "\"BACKGROUND_IMG_URL\" TEXT," + // 8: background_img_url
                "\"NAME\" TEXT," + // 9: name
                "\"LOCAL_PATH\" TEXT," + // 10: local_path
                "\"LOCAL_WB_PATH\" TEXT," + // 11: local_wb_path
                "\"LOCAL_WB_PNG_PATH\" TEXT," + // 12: local_wb_png_path
                "\"TEMP_IMG_URL\" TEXT," + // 13: temp_img_url
                "\"TEMP_VIDEO_URL\" TEXT," + // 14: temp_video_url
                "\"PAPER_TYPE\" INTEGER NOT NULL ," + // 15: paper_type
                "\"USER_CACHE_ID\" INTEGER NOT NULL ," + // 16: userCacheID
                "\"PDF_URL\" TEXT," + // 17: pdf_url
                "\"PDF_PATH\" TEXT);"); // 18: pdf_path
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEIKE_MO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WeikeMo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTotalPage());
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getPushStatus());
        stmt.bindLong(4, entity.getAppType());
        stmt.bindLong(5, entity.getImgID());
        stmt.bindLong(6, entity.getVideoID());
        stmt.bindLong(7, entity.getLocal_time());
        stmt.bindLong(8, entity.getDuration());
 
        String background_img_url = entity.getBackground_img_url();
        if (background_img_url != null) {
            stmt.bindString(9, background_img_url);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
 
        String local_path = entity.getLocal_path();
        if (local_path != null) {
            stmt.bindString(11, local_path);
        }
 
        String local_wb_path = entity.getLocal_wb_path();
        if (local_wb_path != null) {
            stmt.bindString(12, local_wb_path);
        }
 
        String local_wb_png_path = entity.getLocal_wb_png_path();
        if (local_wb_png_path != null) {
            stmt.bindString(13, local_wb_png_path);
        }
 
        String temp_img_url = entity.getTemp_img_url();
        if (temp_img_url != null) {
            stmt.bindString(14, temp_img_url);
        }
 
        String temp_video_url = entity.getTemp_video_url();
        if (temp_video_url != null) {
            stmt.bindString(15, temp_video_url);
        }
        stmt.bindLong(16, entity.getPaper_type());
        stmt.bindLong(17, entity.getUserCacheID());
 
        String pdf_url = entity.getPdf_url();
        if (pdf_url != null) {
            stmt.bindString(18, pdf_url);
        }
 
        String pdf_path = entity.getPdf_path();
        if (pdf_path != null) {
            stmt.bindString(19, pdf_path);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WeikeMo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTotalPage());
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getPushStatus());
        stmt.bindLong(4, entity.getAppType());
        stmt.bindLong(5, entity.getImgID());
        stmt.bindLong(6, entity.getVideoID());
        stmt.bindLong(7, entity.getLocal_time());
        stmt.bindLong(8, entity.getDuration());
 
        String background_img_url = entity.getBackground_img_url();
        if (background_img_url != null) {
            stmt.bindString(9, background_img_url);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
 
        String local_path = entity.getLocal_path();
        if (local_path != null) {
            stmt.bindString(11, local_path);
        }
 
        String local_wb_path = entity.getLocal_wb_path();
        if (local_wb_path != null) {
            stmt.bindString(12, local_wb_path);
        }
 
        String local_wb_png_path = entity.getLocal_wb_png_path();
        if (local_wb_png_path != null) {
            stmt.bindString(13, local_wb_png_path);
        }
 
        String temp_img_url = entity.getTemp_img_url();
        if (temp_img_url != null) {
            stmt.bindString(14, temp_img_url);
        }
 
        String temp_video_url = entity.getTemp_video_url();
        if (temp_video_url != null) {
            stmt.bindString(15, temp_video_url);
        }
        stmt.bindLong(16, entity.getPaper_type());
        stmt.bindLong(17, entity.getUserCacheID());
 
        String pdf_url = entity.getPdf_url();
        if (pdf_url != null) {
            stmt.bindString(18, pdf_url);
        }
 
        String pdf_path = entity.getPdf_path();
        if (pdf_path != null) {
            stmt.bindString(19, pdf_path);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 1);
    }    

    @Override
    public WeikeMo readEntity(Cursor cursor, int offset) {
        WeikeMo entity = new WeikeMo( //
            cursor.getInt(offset + 0), // totalPage
            cursor.getLong(offset + 1), // id
            cursor.getInt(offset + 2), // pushStatus
            cursor.getInt(offset + 3), // appType
            cursor.getInt(offset + 4), // imgID
            cursor.getInt(offset + 5), // videoID
            cursor.getLong(offset + 6), // local_time
            cursor.getLong(offset + 7), // duration
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // background_img_url
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // name
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // local_path
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // local_wb_path
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // local_wb_png_path
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // temp_img_url
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // temp_video_url
            cursor.getInt(offset + 15), // paper_type
            cursor.getLong(offset + 16), // userCacheID
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // pdf_url
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // pdf_path
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WeikeMo entity, int offset) {
        entity.setTotalPage(cursor.getInt(offset + 0));
        entity.setId(cursor.getLong(offset + 1));
        entity.setPushStatus(cursor.getInt(offset + 2));
        entity.setAppType(cursor.getInt(offset + 3));
        entity.setImgID(cursor.getInt(offset + 4));
        entity.setVideoID(cursor.getInt(offset + 5));
        entity.setLocal_time(cursor.getLong(offset + 6));
        entity.setDuration(cursor.getLong(offset + 7));
        entity.setBackground_img_url(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLocal_path(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLocal_wb_path(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLocal_wb_png_path(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTemp_img_url(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTemp_video_url(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPaper_type(cursor.getInt(offset + 15));
        entity.setUserCacheID(cursor.getLong(offset + 16));
        entity.setPdf_url(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPdf_path(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WeikeMo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WeikeMo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WeikeMo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
